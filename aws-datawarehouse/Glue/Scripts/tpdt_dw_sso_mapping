import sys
import boto3
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from datetime import datetime, date, time, timezone,timedelta 
from pyspark.sql.functions import udf, regexp_replace, col, split, explode, coalesce,lit
from pyspark.sql.types import StringType
from pyspark.sql.types import IntegerType
import pandas as pd
import numpy as np
import json
from datetime import datetime, date, time, timezone,timedelta


args = getResolvedOptions(sys.argv, ['JOB_NAME', 'env'])
##Initialization
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)


##Input and Output Config
env = args['env']
table_name = args['JOB_NAME']
if env == 'prod':
    db01="tpdt_01replica"
    db03="tpdt_03dw"
    db02="tpdt_02replica"
    output_path="s3://tpdt-dw/"+table_name+"/"
    staging_path="s3://tpdt-staging/"
    dimension_path="s3://tpdt-dimension/"
else:
    db01="tpdt_01replica_"+env
    db03="tpdt_03dw_"+env
    output_path="s3://tpdt-dw-"+env+"/"+table_name+"/"
    staging_path="s3://tpdt-staging-"+env+"/"
    dimension_path="s3://tpdt-dimension-"+env+"/"

prefix="shkpmalls_sso_"



## Source Extraction -----------------------------------------------------------------------------------------------------------------------------------------------------------
##source table : mapping
t_mapping = glueContext.create_dynamic_frame.from_catalog(database = db01, table_name = prefix+'mapping', transformation_ctx = "mapping")
mapping_df = t_mapping.toDF()
mapping_df.createOrReplaceTempView("mapping")
print("Source Extraxtion Finished: mapping...")

##source table : application
t_application = glueContext.create_dynamic_frame.from_catalog(database = db01, table_name = prefix+'application', transformation_ctx = "application")
application_df = t_application.toDF()
application_df.createOrReplaceTempView("application")
print("Source Extraxtion Finished: application...")
## Source Extraction -----------------------------------------------------------------------------------------------------------------------------------------------------------

## Data Transformation -----------------------------------------------------------------------------------------------------------------------------------------------------------
#spark.conf.set("spark.sql.session.timeZone", "UTC")
dw_sso_mapping = spark.sql(
"""Select
    map.mapping_id,
    map.app_id,
    app.app_name,
    map.member_id,
    map.account_id,
    map.mapping_token,
    map.data,
    map.created_by,
    map.created_date,
    map.updated_by,
    map.updated_date
    from mapping as map
left join application as app on app.app_id = map.app_id""")

dw_sso_mapping = dw_sso_mapping.withColumn('house', regexp_replace(coalesce(col('data'), lit('')), ';', ''))
dw_sso_mapping = dw_sso_mapping.withColumn('house', split(col("house"), ","))
dw_sso_mapping = dw_sso_mapping.select('mapping_id',
    'app_id',
    'app_name',
    'member_id',
    'account_id',
    'mapping_token',
    'data',
    'created_by',
    'created_date',
    'updated_by',
    'updated_date',
    explode(col('house')).alias('house'))\
    .withColumn('account_id', lit(''))

## Data Transformation -----------------------------------------------------------------------------------------------------------------------------------------------------------



## Loading Result to S3
print("Saving Result into target destination...")

dw_sso_mapping.write.format('parquet').mode('overwrite').option("header",True).save(output_path)

print(f"Result Saved in {output_path}...")


job.commit()