import sys
import boto3
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from datetime import datetime, date, time, timezone,timedelta 
from pyspark.sql import Row
from pyspark.sql.functions import *
from pyspark.sql.types import *
from pyspark.sql.functions import col,from_json, regexp_replace, json_tuple, expr, explode
import pandas as pd
import numpy as np
import json




args = getResolvedOptions(sys.argv, ['JOB_NAME', 'env'])
##Initialization
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)



##Input and Output Config
env = args['env']
table_name = args['JOB_NAME']
if env == 'prod':
    db01="tpdt_01replica"
    db03="tpdt_03dw"
    db02="tpdt_02replica"
    output_path="s3://tpdt-stampmission/"
    staging_path="s3://tpdt-staging/"
    dimension_path="s3://tpdt-dimension/"
else:
    db01="tpdt_01replica_"+env
    db03="tpdt_03dw_"+env
    output_path="s3://tpdt-stampmission-"+env+"/"
    staging_path="s3://tpdt-staging-"+env+"/"
    dimension_path="s3://tpdt-dimension-"+env+"/"


prefix="shkpmalls_stamp_"



## Source Extraction -----------------------------------------------------------------------------------------------------------------------------------------------------------
##source table : stamp_card
t_stamp_card  = glueContext.create_dynamic_frame.from_catalog(database = db01, table_name = prefix+'stamp_card', transformation_ctx = "stamp_card")
stamp_card_df = t_stamp_card.toDF()
print("Source Extraxtion Finished: stamp_card...")

##source table : member_stamp_record
t_member_stamp_record  = glueContext.create_dynamic_frame.from_catalog(database = db01, table_name = prefix+'member_stamp_record', transformation_ctx = "member_stamp_record")
member_stamp_record_df = t_member_stamp_record.toDF()
print("Source Extraxtion Finished: member_stamp_record...")

##source table : redemption
t_redemption = glueContext.create_dynamic_frame.from_catalog(database = db01, table_name = prefix+'redemption', transformation_ctx = "redemption")
redemption_df = t_redemption.toDF().select(col('vid').alias('member_id'), 
                                            col('cardid').alias('stamp_program_id') , 
                                            'gift_tier_str' ,
                                            'gift_stamp_required' ,
                                            'pickup_mall_id' , 
                                            'gift_btn_text_en' ,
                                            'gift_btn_text_tc' ,
                                            'redeem_status', 
                                            'redeem_date',
                                            'recordtime' ,
                                            'lastupdatetime' ,
                                            'gift_1_trans_id').toPandas()
print("Source Extraxtion Finished: redemption...")

##source table :  stampcard_shoplist
t_stampcard_shoplist  = glueContext.create_dynamic_frame.from_catalog(database = db01, table_name = prefix+'stampcard_shoplist', transformation_ctx = "stampcard_shoplist")
stampcard_shoplist_df = t_stampcard_shoplist.toDF().select(col('cardid').alias('stamp_program_id'), 'shopid', 'shopname_en').toPandas()
print("Source Extraxtion Finished: stampcard_shoplist...")

## Source Extraction -----------------------------------------------------------------------------------------------------------------------------------------------------------


## Data Transformation -----------------------------------------------------------------------------------------------------------------------------------------------------------
# Table 1: tpdt_ods_stamp_detail -----------------------------------
stemp_detail_df = stamp_card_df.select('ID',
                                       col('ID').alias('ID_INDEX'),
                                       'title_en',
                                       'title_tc',
                                       'banner_desc_en',
                                       'banner_desc_tc',
                                       col('max_no_of_stamp').alias('max_stamp_per_day'),
                                       col('max_no_of_receipt').alias('max_receipt_per_day'),
                                       'max_stamp_per_mall',
                                       'earn_stamp_rule1',
                                       col('max_earn_stamp').alias('max_stamp_per_program'),
                                       'createtime',
                                       'status',
                                       'stamp_desc_en',
                                       'stamp_desc_tc',
                                       to_date(col('datefrom_collect').cast(StringType()), 'yyyyMMdd').alias('datefrom_collect'),
                                       to_date(col('dateto_collect').cast(StringType()), 'yyyyMMdd').alias('dateto_collect'),
                                       to_date(col('datefrom_gift').cast(StringType()), 'yyyyMMdd').alias('datefrom_gift'),
                                       to_date(col('dateto_gift').cast(StringType()), 'yyyyMMdd').alias('dateto_gift'))

stemp_patch = stamp_card_df.select('ID' , 'earn_stamp_rule1_str').toPandas()

full_stemp_list = []
for index, row in stemp_patch.iterrows():
    stemp_list = [row['ID']]
    # print(row['earn_stamp_rule1_str'])
    if '|' in row['earn_stamp_rule1_str']:
        new_list = row['earn_stamp_rule1_str'].split('|')
        for item_u in new_list:
            if item_u.split(':')[1] == '1':
                stemp_list.append(item_u.split(':')[0])
    else:
        stemp_list.append(row['earn_stamp_rule1_str'].split(':')[0])
    full_stemp_list.append(stemp_list)

stamp_detail_list_title = ['ID_INDEX_mapping', 'min_spend_for_a_stamp']
df_stamp_request = pd.DataFrame(np.array(full_stemp_list), columns=stamp_detail_list_title)
stamp_request_sdf = spark.createDataFrame(df_stamp_request)

ods_stamp_detail = stemp_detail_df.join(stamp_request_sdf, stamp_request_sdf.ID_INDEX_mapping== stemp_detail_df.ID_INDEX, how = "left").withColumnRenamed('ID','stamp_program_id')


# Table 2: tpdt_ods_stamp_earn -----------------------------------
stamp_earn_df = member_stamp_record_df.select(col('ID').alias('stamp_transaction_id'),
                                                             col('vid').alias('member_id'),
                                                             col('cardid').alias('stamp_program_id'),
                                                             'no_of_receipt',
                                                             'earn_stamp',
                                                             'lastupdate',
                                                             when(col('no_of_receipt') == 0,lit(1)).otherwise(lit(0)).alias('isPointConversion'))


# Table 3: tpdt_ods_stamp_gift_list -----------------------------------
stamp_gift_list_df = stamp_card_df.select(col('ID').alias('stamp_program_id'),
                                    col('gift_tier_str').alias('gift_list'),
                                    'gift_stamp_required_str',
                                    'gift_requires_approval_str')\
                            .toPandas()


gift_list_rows = len(stamp_gift_list_df)
gift_list_con_list = []
for r in range(gift_list_rows):
    for index, sub_item in enumerate(stamp_gift_list_df['gift_list'][r].split(':')):
        partial_list = [str(stamp_gift_list_df['stamp_program_id'][r])]
        gift_item = sub_item.split('|@|')[1]
        if gift_item[0].isalpha():
            partial_list.append(gift_item)
        else:
            partial_list.append('')
        if gift_item[0].isalpha():
            partial_list.append('')
        else:
            partial_list.append(gift_item)
        partial_list.append(stamp_gift_list_df['gift_stamp_required_str'][r].split(':')[index])
        partial_list.append(stamp_gift_list_df['gift_requires_approval_str'][r].split(':')[index])
        gift_list_con_list.append(partial_list)

gift_list_title = ['stamp_program_id', 'isPhysicalGift', 'isPoint', 'stampRequire','approvalRequire']
gift_list = pd.DataFrame(np.array(gift_list_con_list), columns=gift_list_title)
gift_list_dyf = spark.createDataFrame(gift_list)


# Table 4: tpdt_ods_stamp_receipt_id -----------------------------------
receipt_id_df = member_stamp_record_df.select(col('ID').alias('stamp_transaction_id'), 
                                                       col('vid').alias('member_id'), 
                                                       col('cardid').alias('stamp_program_id'), 
                                                       'lastupdate',
                                                       explode(split('receipt_id', '::')).alias('receipt_id'))\
                                                       .filter("receipt_id <> 0")

# Table 5: tpdt_ods_stamp_redemption -----------------------------------
redemption_rows = len(redemption_df)
redemption_con_list = []
for r in range(redemption_rows):
    partial_list = [str(redemption_df['member_id'][r])]
    partial_list.append(str(redemption_df['stamp_program_id'][r]))

    gift_item = redemption_df['gift_tier_str'][r].split('|@|')[1]
    if gift_item[0].isalpha():
        partial_list.append(gift_item)
    else:
        partial_list.append('')
    if gift_item[0].isalpha():
        partial_list.append('')
    else:
        partial_list.append(gift_item)
    if gift_item[0].isalpha():
        partial_list.append(0)
    else:
        partial_list.append(1)

    partial_list.append(str(redemption_df['gift_stamp_required'][r]))
    partial_list.append(str(redemption_df['pickup_mall_id'][r]))
    partial_list.append(str(redemption_df['gift_btn_text_en'][r]))
    partial_list.append(str(redemption_df['gift_btn_text_tc'][r]))
    partial_list.append(str(redemption_df['redeem_status'][r]))
    partial_list.append(str(redemption_df['redeem_date'][r]))
    partial_list.append(redemption_df['recordtime'][r])
    partial_list.append(redemption_df['lastupdatetime'][r])
    partial_list.append(redemption_df['gift_1_trans_id'][r])
    redemption_con_list.append(partial_list)

redemption_list_title = ['member_id', 'stamp_program_id', 'isPhysicalGift', 'isPoint', 'PointOrGift', 'gift_stamp_required',
                  'pickup_mall_id', 'gift_btn_text_en', 'gift_btn_text_tc', 'redeem_status', 'redeem_date', 'recordtime',
                  'lastupdatetime', 'gift_1_trans_id']
redemption_gift_list = pd.DataFrame(np.array(redemption_con_list), columns=redemption_list_title)

redemption_gift_list['lastupdatetime'] = pd.to_datetime(redemption_gift_list['lastupdatetime'], format="%Y-%m-%d %H:%M:%S" )
redemption_gift_list['recordtime'] = pd.to_datetime(redemption_gift_list['recordtime'], format="%Y-%m-/%d %H:%M:%S" )
redemption_gift_list['redeem_date'] = pd.to_datetime(redemption_gift_list['redeem_date'], format="%Y%m%d" )

ods_stamp_redemption = spark.createDataFrame(redemption_gift_list)

# Table 6: tpdt_ods_stamp_shop_list -----------------------------------
shoplist_rows = len(stampcard_shoplist_df)
shoplist_con_list = []

for r in range(shoplist_rows):
    partial_list = [stampcard_shoplist_df['stamp_program_id'][r]]
    partial_list.append(stampcard_shoplist_df['shopid'][r].split('-')[0])
    partial_list.append(stampcard_shoplist_df['shopid'][r].split('-')[1])
    partial_list.append(stampcard_shoplist_df['shopname_en'][r])
    shoplist_con_list.append(partial_list)

shop_list_title = ['stamp_program_id', 'mallid', 'shopid', 'shopname_en']
shop_list = pd.DataFrame(np.array(shoplist_con_list), columns=shop_list_title)

ods_stamp_shop_list = spark.createDataFrame(shop_list)

## Data Transformation -----------------------------------------------------------------------------------------------------------------------------------------------------------


## Loading Result to S3 -----------------------------------------------------------------------------------------------------------------------------------------------------------
print("Saving Result into target destination...")

# Table 1:
ods_stamp_detail.write.format('parquet').mode('overwrite').option("header",True).save(output_path+'/tpdt_ods_stamp_detail')
# Table 2:
stamp_earn_df.write.format('parquet').mode('overwrite').option("header",True).save(output_path+'/tpdt_ods_stamp_earn')
# Table 3:
gift_list_dyf.write.format('parquet').mode('overwrite').option("header",True).save(output_path+'/tpdt_ods_stamp_gift_list')
# Table 4:
receipt_id_df.write.format('parquet').mode('overwrite').partitionBy("stamp_program_id").option("header",True).save(output_path+'/tpdt_ods_stamp_receipt_id')
# Table 5:
ods_stamp_redemption.write.format('parquet').mode('overwrite').option("header",True).save(output_path+'/tpdt_ods_stamp_redemption')
# Table 5:
ods_stamp_shop_list.write.format('parquet').mode('overwrite').option("header",True).save(output_path+'/tpdt_ods_stamp_shop_list')

print(f"Result Saved in {output_path}...")
## Loading Result to S3 -----------------------------------------------------------------------------------------------------------------------------------------------------------

