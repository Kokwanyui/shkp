import sys
import boto3
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from datetime import datetime, date, time, timezone,timedelta
from pyspark.sql.functions import *
from pyspark.sql.types import StringType
from pyspark.sql.types import IntegerType
import pandas as pd
import numpy as np
import json
from datetime import datetime, date, time, timezone,timedelta


args = getResolvedOptions(sys.argv, ['JOB_NAME', 'env'])
##Initialization
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)


##Input and Output Config
env = args['env']
table_name = args['JOB_NAME']
if env == 'prod':
    db01="tpdt_01replica"
    db03="tpdt_03parking"
    db02="tpdt_02replica"
    dbadhoc = 'tpdt_03adhoc'
    output_path="s3://tpdt-data-storage/"+table_name+"/"
    staging_path="s3://tpdt-staging/"
    dimension_path="s3://tpdt-dimension/"
else:
    db01="tpdt_01replica_"+env
    db03="tpdt_03parking_"+env
    output_path="s3://tpdt-data-storage-"+env+"/"+table_name+"/"
    staging_path="s3://tpdt-staging-"+env+"/"
    dimension_path="s3://tpdt-dimension-"+env+"/"

prefix02 = "tpdt_"

## Source Extraction -----------------------------------------------------------------------------------------------------------------------------------------------------------

##source table : ev_rsr_raw_etl
t_ev_rsr_raw = glueContext.create_dynamic_frame.from_catalog(database = db03, table_name = prefix02 + 'ev_rsr_raw_final', transformation_ctx = "ev_rsr_raw_final")
ev_rsr_raw_df = t_ev_rsr_raw.toDF().select('rsrid',
                                            'duration',
                                            'status',
                                            'createdttm',
                                            'startdttm',
                                            'enddttm',
                                            'actualenddttm',
                                            'lupddttm',
                                            'tranid',
                                            'chargerid',
                                            'connector',
                                            'stoptype',
                                            'externalmemberid',
                                            'mallid',
                                            'carparkid',
                                            'graceperiodenddttm',
                                            'expectedchargingfee',
                                            'expectedpenaltyfee',
                                            'currentunitsession',
                                            'pointredemption',
                                            'redeemunitsessions',
                                            'lp',
                                            'redeemcount',
                                            'penaltymins',
                                            'sessionunitexpectedendtime',
                                            'actualfinishedtime',
                                            'redeemexpiretime',
                                            'referencefee',
                                            'referencepenalty',
                                            'referencepoint',
                                            'referencechargingunit',
                                            'referencepenaltyunit',
                                            'referencemaxchargingunit',
                                            'paymentresultid',
                                            'brandin',
                                            'brandout',
                                            'lpin',
                                            'lpout',
                                            'lprssessionid',
                                            'evdisconnectedtime',
                                            'carentrytime',
                                            'carleavetime',
                                            'lprsbayid')
ev_rsr_raw_df.createOrReplaceTempView("ev_rsr_raw_etl")
print("Source Extraxtion Finished: ev_rsr_raw_etl...")

## Data Transformation -----------------------------------------------------------------------------------------------------------------------------------------------------------


## Loading Result to S3 -----------------------------------------------------------------------------------------------------------------------------------------------------------
print("Saving Result into target destination...")
ev_rsr_raw_df.write.format('parquet').mode('overwrite').option("header",True).save(output_path)
print(f"Result Saved in {output_path}...")
## Loading Result to S3 -----------------------------------------------------------------------------------------------------------------------------------------------------------