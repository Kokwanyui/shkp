AWSTemplateFormatVersion: 2010-09-09
Description: Architecture stack to deploy all necessary resources

Parameters:
  AWSTeam:
    Type: String
    Default: tpdt
  AWSEnv:
    Type: String
    MinLength: '3'
    MaxLength: '6'
    AllowedPattern: ^dev|prod|uat$
    ConstraintDescription: must be dev, prod, uat
  GlueIamRole:
    Type: String
  GlueSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id
  SecretManagerNameDB01:
    Type: String
  SubnetID:
    Type: AWS::EC2::Subnet::Id
  SecretManagerNameRedshiftMaster:
    Type: String
  SecretManagerName03Redshift:
    Type: String
    Default: tpdt_03redshift
  RedShiftSnapshotRetentionPeriod:
    Type: Number
  RedShiftClusterType:
    Type: String
    Description: The type of cluster
    AllowedPattern: ^multi-node|single-node$
  RedShiftNodeType:
    Type: String
    Description: The node type to be provisioned for the cluster
  RedShiftNumberOfNodes:
    Type: String
    Description: The number of compute nodes in the cluster
  RedShiftPreferredMaintenanceWindow:
    Type: String
    Description: The weekly time range (in UTC) during which automated cluster maintenance can occur in format of ddd:hh24:mi-ddd:hh24:mi
  RedShiftVPCSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Type: AWS::EC2::Subnet::Id
  RedshiftLinkedRole:
    Type: String
    Default: arn:aws:iam::244353132907:role/tpdt-redshift-role-prod
  GlueSecurityGroupForRedShift:
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-05b77ab7b2ff06ca6


Conditions:
  IsNotPrd: !Not
    - !Equals
      - !Ref AWSEnv
      - 'prod'
  IsNotDev: !Not
    - !Equals
      - !Ref AWSEnv
      - 'dev'

Outputs:
  GlueDBdw:
    Value: !Ref GlueDBdw
  GlueDB01replica:
    Value: !Ref GlueDB01replica
  S3NameGlueTemporary:
    Value: !Ref S3Adhoc
  GlueConnector01replica:
    Value: !Ref GlueConnector01replica
  GlueConnector03redshift:
    Value: !Ref GlueConnector03redshift
  CrawlerS3staging:
    Value: !Ref CrawlerS3staging
  CrawlerS3dw:
    Value: !Ref CrawlerS3dw
  s3Automation:
    Value: !Ref s3Automation
  S3AthenaResult:
    Value: !Ref S3AthenaResult


Resources:
# Creating S3 Buckets - Start
  S3dw:
    Description: bucket to store all ETL results, for athena
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - dw
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture

  S3decryption:
    Description: bucket to store data realted to decrpytion process
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - decryption
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture

  S3Dimension:
    Description: bucket to store manually handled dimension tables, for glue jobs
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - dimension
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture

  S3Staging:
    Description: bucket to store etl staging tables
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - staging
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture

  S3Redshift:
    Description: bucket to store data for redshift
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - redshift
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture

  S3Iceberg:
    Description: bucket to store athena iceberg table
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - iceberg
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture

  S3Adhoc:
    Description: bucket to store Adhoc data
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - adhoc
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: !Join
            - '-'
            - - !Ref AWSTeam
              - athena
              - adhoc
              - 60days
            Status: Enabled
            ExpirationInDays: 60
            NoncurrentVersionExpiration:
              NoncurrentDays: 60
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 60
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture

  S3AthenaResult:
    Description: bucket to store query result, data retents 7 days(lifecycle not added yet)
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - athena
          - queryresult
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: !Join
            - '-'
            - - !Ref AWSTeam
              - athena
              - queryresult
              - 7days
            Status: Enabled
            ExpirationInDays: 7
            NoncurrentVersionExpiration:
              NoncurrentDays: 7
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture

  S3DataStorage:
    Description: bucket to store imported data or query result data without expiry
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - data
          - storage
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture

  s3Automation:
    Description: bucket to staging or result data of automation task
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join
        - '-'
        - - !Ref AWSTeam
          - automation
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: !Join
            - '-'
            - - !Ref AWSTeam
              - automation
              - 30days
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpiration:
              NoncurrentDays: 30
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 30
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture
# Creating S3 Buckets - End

# Creating Glue Resources - Start
  # Creating Glue DataBase - Start
  GlueDBdw:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Database to connect S3dw bucket
        LocationUri: !Sub 's3://${S3dw}/'
        Name: !Join
          - '_'
          - - !Ref AWSTeam
            - 03dw
            - !If
              - IsNotPrd
              - !Ref AWSEnv
              - !Ref 'AWS::NoValue'

  GlueDBsub:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Database to connect S3dw bucket
        LocationUri: !Sub 's3://${S3Dimension}/'
        Name: !Join
          - '_'
          - - !Ref AWSTeam
            - 03sub
            - !If
              - IsNotPrd
              - !Ref AWSEnv
              - !Ref 'AWS::NoValue'

  GlueDBAdhoc:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Database to connect S3adhoc bucket
        LocationUri: !Sub 's3://${S3Adhoc}/'
        Name: !Join
          - '_'
          - - !Ref AWSTeam
            - 03adhoc
            - !If
              - IsNotPrd
              - !Ref AWSEnv
              - !Ref 'AWS::NoValue'

  GlueDB01replica:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Database to connect 01replica all schema
        Name: !Join
          - '_'
          - - !Ref AWSTeam
            - 01replica
            - !If
              - IsNotPrd
              - !Ref AWSEnv
              - !Ref 'AWS::NoValue'

  GlueDBredshift:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Database to connect redshift
        Name: !Join
          - '_'
          - - !Ref AWSTeam
            - 03redshift
            - !If
              - IsNotPrd
              - !Ref AWSEnv
              - !Ref 'AWS::NoValue'

  GlueDBautomation:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Database to store sql scripts for automation tasks
        LocationUri: !Sub 's3://${s3Automation}/'
        Name: !Join
          - '_'
          - - !Ref AWSTeam
            - 03automation
            - !If
              - IsNotPrd
              - !Ref AWSEnv
              - !Ref 'AWS::NoValue'


  # Creating Glue DataBase - End

  # Creating Glue Connection - Start
  GlueConnector01replica:
    Type: AWS::Glue::Connection
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Description: "Connect to DB01 replica MySQL database."
        ConnectionType: "JDBC"
        PhysicalConnectionRequirements:
          SecurityGroupIdList:
            - !Ref GlueSecurityGroupID
          SubnetId: !Ref SubnetID
        ConnectionProperties:
          JDBC_CONNECTION_URL: !Join
            - ''
            - - 'jdbc:mysql://'
              - !Sub '{{resolve:secretsmanager:${SecretManagerNameDB01}:SecretString:host}}'
              - ':'
              - !Sub '{{resolve:secretsmanager:${SecretManagerNameDB01}:SecretString:port}}'
              - '/'
              - !Sub '{{resolve:secretsmanager:${SecretManagerNameDB01}:SecretString:dbname}}'
          USERNAME: !Sub '{{resolve:secretsmanager:${SecretManagerNameDB01}:SecretString:username}}'
          PASSWORD: !Sub '{{resolve:secretsmanager:${SecretManagerNameDB01}:SecretString:password}}'
        Name: !Join
          - '-'
          - - !Ref AWSTeam
            - 01replica
            - connector
            - !If
              - IsNotPrd
              - !Ref AWSEnv
              - !Ref 'AWS::NoValue'

  GlueConnector03redshift:
    Type: AWS::Glue::Connection
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Description: "Connect to 03redshift"
        ConnectionType: "JDBC"
        PhysicalConnectionRequirements:
          SecurityGroupIdList:
            - !Ref GlueSecurityGroupForRedShift
          SubnetId: !Ref SubnetID
        ConnectionProperties:
          JDBC_CONNECTION_URL: !Join
            - ''
            - - 'jdbc:redshift://'
              - !Sub '{{resolve:secretsmanager:${SecretManagerName03Redshift}:SecretString:host}}'
              - ':'
              - !Sub '{{resolve:secretsmanager:${SecretManagerName03Redshift}:SecretString:port}}'
              - '/'
              - !Sub '{{resolve:secretsmanager:${SecretManagerName03Redshift}:SecretString:dbname}}'
          USERNAME: !Sub '{{resolve:secretsmanager:${SecretManagerName03Redshift}:SecretString:username}}'
          PASSWORD: !Sub '{{resolve:secretsmanager:${SecretManagerName03Redshift}:SecretString:password}}'
        Name: !Join
          - '-'
          - - !Ref AWSTeam
            - 03redshift
            - connector
            - !If
              - IsNotPrd
              - !Ref AWSEnv
              - !Ref 'AWS::NoValue'
  # Creating Glue Connection - End

  # Creating Glue S3 Crawler - Start
  CrawlerS3dimension:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - s3
          - dimension
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl Dimension data in S3
      DatabaseName: !Ref GlueDBsub
      Targets:
        S3Targets:
          - Path: !Sub 's3://${S3Dimension}'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerS3staging:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - s3
          - staging
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl Staging data in S3
      DatabaseName: !Ref GlueDBsub
      Targets:
        S3Targets:
          - Path: !Sub 's3://${S3Staging}'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerS3Adhoc:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - s3
          - adhoc
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl Adhoc data in S3
      DatabaseName: !Ref GlueDBAdhoc
      Targets:
        S3Targets:
          - Path: !Sub 's3://${S3Adhoc}'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerS3dw:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - s3
          - dw
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl DW data in S3
      DatabaseName: !Ref GlueDBdw
      Targets:
        S3Targets:
          - Path: !Sub 's3://${S3dw}'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerS3Storage:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - s3
          - datastorage
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl data storage data in S3
      DatabaseName: !Ref GlueDBAdhoc
      Targets:
        S3Targets:
          - Path: !Sub 's3://${S3DataStorage}'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }
  # Creating Glue S3 Crawler - End

  # Creating Glue JDBC Crawler - Start
  CrawlerJDBCshkpmallsVip:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - shkpmalls
          - vip
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl shkpmalls_vip data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: shkpmalls_vip/%
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerJDBCshkpmallsApi:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - shkpmalls
          - api
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl shkpmalls_api data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: shkpmalls_api/%
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerJDBCshkpmallsAutoPay:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - shkpmalls
          - autopay
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl shkpmalls-autopay data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: shkpmalls-autopay/%
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerJDBCshkpmallsPush:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - shkpmalls
          - push
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl shkpmalls_push data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: shkpmalls_push/%
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerJDBCshkpmallsSSO:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - shkpmalls
          - sso
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl shkpmalls_sso data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: shkpmalls_sso/%
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerJDBCshkpmallsStamp:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - shkpmalls
          - stamp
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl shkpmalls-stamp data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: shkpmalls-stamp/%
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerJDBCvipWWW:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - vip
          - www
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl vip-www data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: vip-www/%
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerJDBCcarpark:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - carpark
          - data
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl carpark_data data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: carpark_data/%
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerJDBCshkpmallscarpark:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - shkpmalls
          - carpark
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl shkpmalls_carpark data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: !Join
              - ''
              - - shkpmalls_carpark
                - !If
                  - IsNotDev
                  - '/%'
                  - '_bi/%'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }

  CrawlerJDBCshkpmallscms:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Join
        - '-'
        - - !Ref AWSTeam
          - db01
          - shkpmalls
          - cms
          - crawler
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      Role: !Ref GlueIamRole
      Description: Crawl shkpmalls_cms data in db01
      DatabaseName: !Ref GlueDB01replica
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnector01replica
            Path: !Join
              - ''
              - - shkpmalls_cms
                - !If
                  - IsNotDev
                  - '/%'
                  - '_bi/%'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      Tags: {
        application: !Ref AWSTeam ,
        environment: !Ref AWSEnv ,
        stack: architecture
      }
  # Creating Glue JDBC Crawler - End
# Creating Glue Resources - End

# Creating Redshift Resources - Start
  # Creating Redshift Cluster - Start
  RedShiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      AutomatedSnapshotRetentionPeriod: !Ref RedShiftSnapshotRetentionPeriod
      AllowVersionUpgrade: true
      ClusterSubnetGroupName: shkp-prod-redshift-subnetgroup
      ClusterType: !Ref RedShiftClusterType
      ClusterIdentifier: !Join
        - '-'
        - - !Ref AWSTeam
          - redshift-private-cluster
          - !If
            - IsNotPrd
            - !Ref AWSEnv
            - !Ref 'AWS::NoValue'
      ClusterVersion: 1
      DBName: !Ref AWSTeam
      Encrypted: false
      MasterUsername: !Sub '{{resolve:secretsmanager:${SecretManagerNameRedshiftMaster}:SecretString:user}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${SecretManagerNameRedshiftMaster}:SecretString:password}}'
      NodeType: !Ref RedShiftNodeType
      NumberOfNodes: !Ref RedShiftNumberOfNodes
      PreferredMaintenanceWindow: !Ref RedShiftPreferredMaintenanceWindow
      PubliclyAccessible: false
      IamRoles:
        - !Ref RedshiftLinkedRole
      VpcSecurityGroupIds:
        - !Ref RedShiftVPCSecurityGroupID
      Tags:
        - Key: application
          Value: !Ref AWSTeam
        - Key: environment
          Value: !Ref AWSEnv
        - Key: stack
          Value: architecture
  # Creating Redshift Cluster - End
# Creating Redshift Resources - End



